import Foundation

class OpenAIService {
    static let shared = OpenAIService()
    private let apiKey = "sk-..." // Убедись, что здесь твой ключ
    private let url = URL(string: "https://api.openai.com/v1/chat/completions")!

    func getAdvice(prompt: String, completion: @escaping (String) -> Void) {
        guard !apiKey.isEmpty, apiKey != "sk-..." else {
            completion("Ошибка: API-ключ OpenAI не настроен. Пожалуйста, добавьте действительный ключ в OpenAIService.swift.")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")

        let body: [String: Any] = [
            "model": "gpt-3.5-turbo",
            "messages": [
                ["role": "user", "content": prompt]
            ],
            "max_tokens": 150
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion("Ошибка при создании запроса: \(error.localizedDescription)")
            return
        }

        print("Отправляем запрос к OpenAI: \(url.absoluteString)")
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Ошибка сети: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    completion("Ошибка при получении ответа: \(error.localizedDescription)")
                }
                return
            }

            guard let httpResponse = response as? HTTPURLResponse else {
                DispatchQueue.main.async {
                    completion("Ошибка: Неверный ответ от сервера")
                }
                return
            }

            print("Статус ответа: \(httpResponse.statusCode)")
            guard httpResponse.statusCode == 200 else {
                if httpResponse.statusCode == 429 {
                    DispatchQueue.main.async {
                        completion("Ошибка: Превышен лимит запросов к OpenAI. Подождите немного.")
                    }
                } else if httpResponse.statusCode == 401 {
                    DispatchQueue.main.async {
                        completion("Ошибка: Неверный API-ключ OpenAI.")
                    }
                } else {
                    DispatchQueue.main.async {
                        completion("Ошибка: Сервер вернул статус \(httpResponse.statusCode)")
                    }
                }
                return
            }

            guard let data = data else {
                DispatchQueue.main.async {
                    completion("Ошибка: Нет данных от сервера")
                }
                return
            }

            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let content = message["content"] as? String {
                    DispatchQueue.main.async {
                        completion(content.trimmingCharacters(in: .whitespacesAndNewlines))
                    }
                } else {
                    DispatchQueue.main.async {
                        completion("Ошибка при обработке ответа: Неверный формат данных")
                    }
                }
            } catch {
                print("Ошибка разбора JSON: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    completion("Ошибка при разборе ответа: \(error.localizedDescription)")
                }
            }
        }.resume()
    }
}
