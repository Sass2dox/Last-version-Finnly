import Foundation
import SwiftUI

class UserData: ObservableObject, Codable {
    @Published var userID: String
    @Published var parentID: String
    @Published var weeklyBudget: Int
    @Published var expenses: String
    @Published var expenseHistory: [ExpenseEntry]
    @Published var savingsGoal: Int
    @Published var savingsDeadline: String
    @Published var currentSavings: Int
    @Published var chatHistory: String

    struct ExpenseEntry: Codable, Identifiable {
        let id: UUID
        let amount: Int
        let description: String
        let date: Date
    }

    init(userID: String, parentID: String, weeklyBudget: Int, expenses: String, expenseHistory: [ExpenseEntry], savingsGoal: Int, savingsDeadline: String, currentSavings: Int, chatHistory: String) {
        self.userID = userID
        self.parentID = parentID
        self.weeklyBudget = weeklyBudget
        self.expenses = expenses
        self.expenseHistory = expenseHistory
        self.savingsGoal = savingsGoal
        self.savingsDeadline = savingsDeadline
        self.currentSavings = currentSavings
        self.chatHistory = chatHistory
    }

    enum CodingKeys: String, CodingKey {
        case userID, parentID, weeklyBudget, expenses, expenseHistory, savingsGoal, savingsDeadline, currentSavings, chatHistory
    }

    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        userID = try container.decode(String.self, forKey: .userID)
        parentID = try container.decode(String.self, forKey: .parentID)
        weeklyBudget = try container.decode(Int.self, forKey: .weeklyBudget)
        expenses = try container.decode(String.self, forKey: .expenses)
        expenseHistory = try container.decode([ExpenseEntry].self, forKey: .expenseHistory)
        savingsGoal = try container.decode(Int.self, forKey: .savingsGoal)
        savingsDeadline = try container.decode(String.self, forKey: .savingsDeadline)
        currentSavings = try container.decode(Int.self, forKey: .currentSavings)
        chatHistory = try container.decode(String.self, forKey: .chatHistory)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userID, forKey: .userID)
        try container.encode(parentID, forKey: .parentID)
        try container.encode(weeklyBudget, forKey: .weeklyBudget)
        try container.encode(expenses, forKey: .expenses)
        try container.encode(expenseHistory, forKey: .expenseHistory)
        try container.encode(savingsGoal, forKey: .savingsGoal)
        try container.encode(savingsDeadline, forKey: .savingsDeadline)
        try container.encode(currentSavings, forKey: .currentSavings)
        try container.encode(chatHistory, forKey: .chatHistory)
    }
}
